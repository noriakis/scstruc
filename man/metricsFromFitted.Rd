% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/metricsFromFitted.R
\name{metricsFromFitted}
\alias{metricsFromFitted}
\title{metricsFromFitted}
\usage{
metricsFromFitted(
  fitted,
  N,
  algos = c("glmnet_CV"),
  mmhc = TRUE,
  alphas = c(0.001, 0.005, 0.01, 0.05),
  ppi = FALSE,
  org = "mm",
  return_data = FALSE,
  algorithm.args = list(),
  hurdle = FALSE,
  sid_sym = FALSE,
  ccdr = TRUE,
  return_net = FALSE,
  lingam = FALSE,
  lambdas.length = 10,
  sid = FALSE,
  ges = FALSE
)
}
\arguments{
\item{fitted}{reference network that is parameter fitted}

\item{N}{number of samples to be drawn from `fitted` by `rbn` function.}

\item{algos}{algorithm names
(For CCDr, hurdle, and MMHC, please specify other arguments)}

\item{mmhc}{perform comparison with MMHC implemented in bnlearn with
alphas specified in `alphas` argument.}

\item{alphas}{alpha to be used in the restricting phase of MMHC.}

\item{ppi}{if specified, include metrics of comparison with PPI.
The network node name should be symbol for calculating the intersection.
Also, `database` and `org` argument should be specified based on the node name.}

\item{org}{passed to `intersectPpi` function}

\item{return_data}{return data}

\item{algorithm.args}{algorithm args (currently not used in the function)}

\item{hurdle}{perform inference based on Hurdle model, default to FALSE.
Some scoring functions used in the function cannot calculate scores
if the feature abundances are all negative. In this case, these scores will be omitted.}

\item{sid_sym}{compute symmetrized version of SID}

\item{ccdr}{perform comparison with CCDr algorithm with lambda length specified in 
`lambdas.length` argument.}

\item{return_net}{return list of whole BN}

\item{lingam}{perform lingam evaluation}

\item{lambdas.length}{lambda length in CCDr algorithm}

\item{sid}{compute SID}

\item{ges}{perform ges evaluation}
}
\description{
Evaluate various metrics comparing reference network and inferred network.
The inference will be performed based on randomly generated data from 
fitted Bayesian network (`bn.fit` object). For the already calculated networks,
please use `metrics()` function.

The description of metrics is as follows:

s0: edge number in original graph
edges: edge number in inferred graph
p: node number in original graph
N: sample number
SHD: structural hamming distance
SID: structural intervention distance (if specified)
time: time needed in structure learning (sec)

Time will be calculated by differences in Sys.time() and will be displayed after
algorithms' name
}
